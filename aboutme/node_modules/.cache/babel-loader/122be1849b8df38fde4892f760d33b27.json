{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Documents\\\\xdrive\\\\Apples\\\\Projects\\\\AboutMe\\\\aboutme\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; //make object.keys the first variable used to populate the list, then change the array to object.values much easier\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState({\n    id: 0,\n    name: '',\n    skills: [],\n    likes: [],\n    contact: ''\n  });\n  const [meDisp, setMeDisp] = useState([...Object.keys(data)]);\n\n  const changeProp = _index => {\n    //if the display item is a key of the object, set it to the value\n    var el = document.getElementById(`cues${_index}`);\n    var currTxt = el.textContent;\n    var keys = Object.keys(data);\n\n    if (keys.includes(currTxt)) {\n      var txt = ''; //if the value is an array format it for reading\n\n      typeof data[keys[_index + 1]] === 'object' ? txt = data[keys[_index + 1]].join(', ') : txt = data[keys[_index + 1]];\n      console.log(txt);\n      el.textContent = txt;\n    } else {\n      //if it _item is a value, get key of index\n      el.textContent = Object.keys(data)[_index + 1];\n    }\n\n    el.classList.add('transitive');\n    el.classList.toggle('tag-diff');\n  };\n\n  useEffect(() => {\n    //api fetch goes here\n    //Note: template for actions is 'controller/action/id?'\n    const fetchMe = async () => {\n      const response = await fetch('https://localhost:7010/Owner/aboutme');\n      let myData;\n\n      try {\n        myData = await response.json();\n        setData(myData);\n      } catch (err) {\n        alert(err);\n      }\n\n      console.log(myData);\n    };\n\n    fetchMe();\n    setMeDisp(Object.keys(data));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"About Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: meDisp.slice(1).map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          id: 'cues' + index,\n          className: \"tag\",\n          onClick: () => changeProp(index),\n          children: item.toString()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"pEPenedKx1YhnOycjKpVdoB1Rh8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Ben/Documents/xdrive/Apples/Projects/AboutMe/aboutme/src/App.js"],"names":["useState","useEffect","App","data","setData","id","name","skills","likes","contact","meDisp","setMeDisp","Object","keys","changeProp","_index","el","document","getElementById","currTxt","textContent","includes","txt","join","console","log","classList","add","toggle","fetchMe","response","fetch","myData","json","err","alert","slice","map","item","index","toString"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\n//make object.keys the first variable used to populate the list, then change the array to object.values much easier\nfunction App() {\n  const [data, setData]=useState({id:0, name:'', skills:[], likes:[], contact:''});\n\tconst [meDisp, setMeDisp] = useState([...Object.keys(data)]);\n\tconst changeProp = _index => {\n\t\t//if the display item is a key of the object, set it to the value\n\t\tvar el = document.getElementById(`cues${_index}`);\n\t\tvar currTxt = el.textContent;\n\t\tvar keys = Object.keys(data);\n\t\tif (keys.includes(currTxt)) {\n\t\t\tvar txt = '';\n\t\t\t//if the value is an array format it for reading\n\t\t\ttypeof data[keys[_index + 1]] === 'object'\n\t\t\t\t? (txt = data[keys[_index + 1]].join(', '))\n\t\t\t\t: (txt = data[keys[_index + 1]]);\n\t\t\tconsole.log(txt);\n\t\t\tel.textContent = txt;\n\t\t} else {\n\t\t\t//if it _item is a value, get key of index\n\t\t\tel.textContent = Object.keys(data)[_index + 1];\n\t\t}\n\t\tel.classList.add('transitive');\n\t\tel.classList.toggle('tag-diff');\n\t};\n\tuseEffect(() => {\n\t\t//api fetch goes here\n\t\t//Note: template for actions is 'controller/action/id?'\n\t\tconst fetchMe = async () => {\n\t\t\tconst response = await fetch('https://localhost:7010/Owner/aboutme');\n\t\t\tlet myData;\n\t\t\ttry {\n\t\t\t\tmyData = await response.json();\n\t\t\t\tsetData(myData);\n\t\t\t} catch (err) {\n\t\t\t\talert(err);\n\t\t\t}\n\t\t\tconsole.log(myData);\n\t\t};\n\t\tfetchMe();\n\t\tsetMeDisp(Object.keys(data));\n\t}, []);\n\treturn (\n\t\t<div id=\"content\">\n\t\t\t<h1>About Me</h1>\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{meDisp.slice(1).map((item, index) => (\n\t\t\t\t\t\t<li id={'cues' + index} key={index} className=\"tag\" onClick={() => changeProp(index)}>\n\t\t\t\t\t\t\t{item.toString()}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}