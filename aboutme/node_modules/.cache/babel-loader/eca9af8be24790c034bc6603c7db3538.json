{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ben\\\\Documents\\\\xdrive\\\\Apples\\\\Projects\\\\AboutMe\\\\aboutme\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; //make object.keys the first variable used to populate the list, then change the array to object.values much easier\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState({\n    id: 0,\n    name: '',\n    skills: [],\n    likes: [],\n    contact: ''\n  });\n  const [txt, setTxt] = useState('');\n  const meDisp = [...Object.keys(data)];\n\n  const changeProp = _index => {\n    //if the display item is a key of the object, set it to the value\n    var currTxt = document.getElementById(`cues${_index}`);\n\n    if (Object.keys(data).includes()) {\n      //if the value is an array format it for reading\n      typeof data[_index] === 'object' ? setTxt(data[_index].join(', ')) : setTxt(data[_index]);\n      document.getElementById(`cues${_index}`).textContent = txt;\n    } else {\n      //if it _item is a value, get key of index\n      console.log(\"we're here\");\n      document.getElementById(`cues${_index}`).textContent = Object.keys(data)[_index + 1];\n    }\n  };\n\n  useEffect(() => {\n    //api fetch goes here\n    //Note: template for actions is 'controller/action/id?'\n    const fetchMe = async () => {\n      const response = await fetch('https://localhost:7010/Owner/aboutme');\n      let myData;\n\n      try {\n        myData = await response.json();\n        setData(myData);\n      } catch (err) {\n        alert(err);\n      }\n\n      console.log(myData);\n    };\n\n    fetchMe();\n    meDisp = Object.keys(data);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"About Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: meDisp.slice(1).map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          id: 'cues' + index,\n          className: \"tag\",\n          onClick: () => changeProp(index),\n          children: item.toString()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"lxHO+yIhX8PzXDFMjlVWCXk4Nqo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Ben/Documents/xdrive/Apples/Projects/AboutMe/aboutme/src/App.js"],"names":["useState","useEffect","App","data","setData","id","name","skills","likes","contact","txt","setTxt","meDisp","Object","keys","changeProp","_index","currTxt","document","getElementById","includes","join","textContent","console","log","fetchMe","response","fetch","myData","json","err","alert","slice","map","item","index","toString"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAgBJ,QAAQ,CAAC;AAACK,IAAAA,EAAE,EAAC,CAAJ;AAAOC,IAAAA,IAAI,EAAC,EAAZ;AAAgBC,IAAAA,MAAM,EAAC,EAAvB;AAA2BC,IAAAA,KAAK,EAAC,EAAjC;AAAqCC,IAAAA,OAAO,EAAC;AAA7C,GAAD,CAA9B;AACA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,EAAD,CAA9B;AACD,QAAMY,MAAM,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYX,IAAZ,CAAJ,CAAf;;AACA,QAAMY,UAAU,GAAGC,MAAM,IAAI;AAC5B;AACA,QAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAyB,OAAMH,MAAO,EAAtC,CAAd;;AACA,QAAIH,MAAM,CAACC,IAAP,CAAYX,IAAZ,EAAkBiB,QAAlB,EAAJ,EAAkC;AACjC;AACA,aAAOjB,IAAI,CAACa,MAAD,CAAX,KAAwB,QAAxB,GAAmCL,MAAM,CAACR,IAAI,CAACa,MAAD,CAAJ,CAAaK,IAAb,CAAkB,IAAlB,CAAD,CAAzC,GAAqEV,MAAM,CAACR,IAAI,CAACa,MAAD,CAAL,CAA3E;AACAE,MAAAA,QAAQ,CAACC,cAAT,CAAyB,OAAMH,MAAO,EAAtC,EAAyCM,WAAzC,GAAuDZ,GAAvD;AACA,KAJD,MAIO;AACN;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAN,MAAAA,QAAQ,CAACC,cAAT,CAAyB,OAAMH,MAAO,EAAtC,EAAyCM,WAAzC,GAAuDT,MAAM,CAACC,IAAP,CAAYX,IAAZ,EAAkBa,MAAM,GAAG,CAA3B,CAAvD;AACA;AACD,GAZD;;AAaAf,EAAAA,SAAS,CAAC,MAAM;AACf;AACA;AACA,UAAMwB,OAAO,GAAG,YAAY;AAC3B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,CAA5B;AACA,UAAIC,MAAJ;;AACA,UAAI;AACHA,QAAAA,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAf;AACAzB,QAAAA,OAAO,CAACwB,MAAD,CAAP;AACA,OAHD,CAGE,OAAOE,GAAP,EAAY;AACbC,QAAAA,KAAK,CAACD,GAAD,CAAL;AACA;;AACDP,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACA,KAVD;;AAWAH,IAAAA,OAAO;AACPb,IAAAA,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYX,IAAZ,CAAT;AACA,GAhBQ,EAgBN,EAhBM,CAAT;AAiBA,sBACC;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,6BACC;AAAA,kBACES,MAAM,CAACoB,KAAP,CAAa,CAAb,EAAgBC,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,kBACpB;AAAI,UAAA,EAAE,EAAE,SAASA,KAAjB;AAAoC,UAAA,SAAS,EAAC,KAA9C;AAAoD,UAAA,OAAO,EAAE,MAAMpB,UAAU,CAACoB,KAAD,CAA7E;AAAA,oBACED,IAAI,CAACE,QAAL;AADF,WAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA,gBADA;AADF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAcA;;GAhDQjC,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react';\n//make object.keys the first variable used to populate the list, then change the array to object.values much easier\nfunction App() {\n  const [data, setData]=useState({id:0, name:'', skills:[], likes:[], contact:''});\n  const [txt, setTxt] = useState('');\n\tconst meDisp = [...Object.keys(data)];\n\tconst changeProp = _index => {\n\t\t//if the display item is a key of the object, set it to the value\n\t\tvar currTxt = document.getElementById(`cues${_index}`);\n\t\tif (Object.keys(data).includes()) {\n\t\t\t//if the value is an array format it for reading\n\t\t\ttypeof data[_index] === 'object' ? setTxt(data[_index].join(', ')) : setTxt(data[_index]);\n\t\t\tdocument.getElementById(`cues${_index}`).textContent = txt;\n\t\t} else {\n\t\t\t//if it _item is a value, get key of index\n\t\t\tconsole.log(\"we're here\");\n\t\t\tdocument.getElementById(`cues${_index}`).textContent = Object.keys(data)[_index + 1];\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\t//api fetch goes here\n\t\t//Note: template for actions is 'controller/action/id?'\n\t\tconst fetchMe = async () => {\n\t\t\tconst response = await fetch('https://localhost:7010/Owner/aboutme');\n\t\t\tlet myData;\n\t\t\ttry {\n\t\t\t\tmyData = await response.json();\n\t\t\t\tsetData(myData);\n\t\t\t} catch (err) {\n\t\t\t\talert(err);\n\t\t\t}\n\t\t\tconsole.log(myData);\n\t\t};\n\t\tfetchMe();\n\t\tmeDisp = Object.keys(data);\n\t}, []);\n\treturn (\n\t\t<div id=\"content\">\n\t\t\t<h1>About Me</h1>\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{meDisp.slice(1).map((item, index) => (\n\t\t\t\t\t\t<li id={'cues' + index} key={index} className=\"tag\" onClick={() => changeProp(index)}>\n\t\t\t\t\t\t\t{item.toString()}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}